class Solution {
public:
    
    bool bfs(int node, vector<int> &color, vector<vector<int>> graph) {
        queue<int> q;
        q.push(node);
        color[0] = 0;
        while(!q.empty()) {
            int val = q.front();
            q.pop();
            for(auto it : graph[val]) {
                if(color[it] == -1) {
                    color[it] = !color[val];
                    q.push(it);
                }
                else if(color[it] == color[val]) {
                    return false;
                }
            }
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        
        for(int i = 0; i < n; i++) {
            if(!bfs(i, color, graph)) return false;
        }
        return true;
    }
};

// TC: O(n + v) simple bfs/dfs complexity
// SC: O(n) coloring graph space
