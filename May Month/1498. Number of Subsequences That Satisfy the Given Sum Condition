class Solution {
public:
    const int mod = 1e9 + 7;
    int power(long long a, long long b) {
        long long ans = 1;
        
        while(b > 0) {
            if(b & 1) ans = (ans * a) % mod;
            a = ((a * a * 1ll) % mod) % mod;
            b >>= 1;
        }
        return ans;
    }
    int numSubseq(vector<int>& arr, int t) {
        sort(begin(arr), end(arr));
        int n = arr.size();   
        int low = 0, high = n - 1;
        int ans = 0;
        while(low <= high) {
            if(arr[low] + arr[high] <= t) {
                ans += power(2, (high - low));
                ans %= mod;
                low++;
            }
            else high--;
        }
        return ans;
    }
};

// TC: O(nlog n)  // since we are doing sorting.
// SC: O(1) 
